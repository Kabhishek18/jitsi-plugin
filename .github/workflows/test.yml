# .github/workflows/test.yml

name: Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        # Add 3.11 and 3.12 to test with newer Python versions

    steps:
    - name: Check out repository
      uses: actions/checkout@v3  # Upgrade to v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4  # Upgrade to v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # Enable pip caching for faster installs
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock requests-mock pytest-asyncio
        # Install the package in development mode
        pip install -e ".[dev]"
    
    - name: Run linting
      run: |
        # Install linting tools
        pip install flake8 black isort
        # Run linting checks
        flake8 jitsi_plus_plugin --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check jitsi_plus_plugin
        isort --check-only --profile black jitsi_plus_plugin
    
    - name: Run unit tests
      run: |
        pytest tests/unit -v
    
    - name: Run integration tests
      run: |
        pytest tests/integration -v
    
    - name: Generate coverage report
      run: |
        pytest --cov=jitsi_plus_plugin --cov-report=xml tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3  # Upgrade to v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
        retention-days: 7

  publish:
    name: Publish to PyPI (on release)
    runs-on: ubuntu-latest
    needs: [test, build]
    # Only run this job when creating a release tag
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Twine
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
